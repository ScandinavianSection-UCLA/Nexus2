// react functionality
import React from "react";
// prop validation
import PropTypes from "prop-types";
// styling for the map
import "./MapView.css";
// map functionality
import {
    LayersControl,
    Map,
    Marker,
    Popup,
    TileLayer,
    WMSTileLayer,
    GeoJSON
} from "react-leaflet";
import Leaflet from "leaflet";
import AugFieldtrip from "./fieldtrip_layers/field_trip_geojsons/aug_1895_photo1.geojson"

import {getPlacesByID} from "../../data-stores/DisplayArtifactModel";
import {arrayTransformation, getPlaceIDList} from "../../utils";
import {bindActionCreators} from "redux";
import * as tabViewerActions from "../../actions/tabViewerActions";
import connect from "react-redux/es/connect/connect";

// constants + defaults for our map
const {BaseLayer} = LayersControl,
    DEFAULT_MAP_CENTER = [56.2639, 9.5018],
    DEFAULT_ZOOM_LEVEL = 7;

class MapView extends React.Component {
    constructor(props) {
        super(props);
        this.lastclick = {
            "popup": null,
            "time": 0,
        };
        // start off with defaults
        this.tiles = [{
            "name": "Default OpenStreet Map",
            "type": "TILE",
            "url": "https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png",
            "attribution": "&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors",
            "checked": false,
        }, {
            "name": "High Boards",
            "type": "WMS",
            "layers": "dtk_hoeje_maalebordsblade",
            "url": "http://kortforsyningen.kms.dk/service?servicename=topo20_hoeje_maalebordsblade&client=arcGIS&request=GetCapabilities&service=WMS&version=1.1.1&login=tango1963&password=heimskr1;",
            "format": "image/png",
            "checked": false,
        }, {
            "name": "Low Boards",
            "type": "WMS",
            "layers": "dtk_lave_maalebordsblade",
            "url": "http://kortforsyningen.kms.dk/service?servicename=topo20_lave_maalebordsblade&client=arcGIS&request=GetCapabilities&service=WMS&version=1.1.1&login=tango1963&password=heimskr1;",
            "format": "image/png",
            "checked": true,
        }];
    }

    /**
     * Filters out invalid places from props
     * @returns {Array<Places>} Only the valid places from props
     */
    prunePlaces() {
        // for each of prop's places
        return getPlaceIDList(arrayTransformation(this.props.places)).map((placeID) => getPlacesByID(placeID)).filter((place) =>
            // make sure it isn't undefined
            typeof place !== "undefined" &&
            // or null
            place !== null &&
            // and it should have a latitude
            place.hasOwnProperty("latitude") &&
            // and longitude
            place.hasOwnProperty("longitude"));
    }

    /**
     * Defines the center coordinates of the map
     * @returns {Array<Number>} 2 element array for the coordinates of the center
     */
    defineMapCenter() {
        // get filtered places
        const places = this.prunePlaces();
        if (this.props.view === "Fieldtrip") {
            //find longitude average
            var AvgLongitude;
            var TotalLongitude = 0;
            places.forEach((place) => {
                TotalLongitude += place.longitude;
            });
            AvgLongitude = TotalLongitude / places.length;
            const MedianPlaceIndex = places.length / 2 | 0;
            const MedianPlace = places[MedianPlaceIndex];
            return [MedianPlace.latitude, AvgLongitude];
        }
        // if places is of an adequate size
        else if (places.length > 0 && places.length < 20) {
            // get the first place
            const initialPlace = places[0];
            // use that as the map center
            return [initialPlace.latitude, initialPlace.longitude];
        } else {
            // bad places, use the default
            return DEFAULT_MAP_CENTER;
        }
    }

    /**
     * Defines the zoom of the map
     * @returns {Number} THe zoom of the map
     */
    defineMapZoom() {
        // get filtered places
        const places = this.prunePlaces();
        if (this.props.view === "Fieldtrip") {
            return 9;
        }
        // if places is of an adequate size
        else if (places.length > 0 && places.length < 20) {
            // use 14 at the zoom (any reason why 14?)
            return 14;
        } else {
            // bad places, use the default
            return DEFAULT_ZOOM_LEVEL;
        }
    }

    renderTiles() {
        return this.tiles.map((tile, i) => {
            switch (tile.type) {
                case "TILE":
                    return (
                        <BaseLayer checked={tile.checked} name={tile.name} key={i}>
                            <TileLayer
                                attribution={tile.attribution}
                                url={tile.url}
                                checked={tile.checked}
                            />
                        </BaseLayer>
                    );
                case "WMS":
                    return (
                        <BaseLayer checked={tile.checked} name={tile.name} key={i}>
                            <WMSTileLayer
                                layers={tile.layers}
                                format={tile.format}
                                url={tile.url}
                            />
                        </BaseLayer>
                    );
                default:
                    return (
                        <BaseLayer checked={tile.checked} name={tile.name}>
                            <TileLayer
                                attribution={tile.attribution}
                                url={tile.url}
                            />
                        </BaseLayer>
                    );
            }
        });
    }

    /**
     * Generate the popups for the map
     * @returns {Array<Marker>} Markers + popups
     */
    renderMarkers() {
        const temp = arrayTransformation(this.props.places).map((place) => place.name);
        // get filtered places
        return arrayTransformation(this.props.places).filter((item, i) =>
            temp.indexOf(item.name) === i)
            // for each of the places, create a marker and popup
            .map((place, i) => this.renderMarker(place, i));
    }

    renderMarker(place, i) {
        const place2 = getPlacesByID(place.place_id);
        if (place2 !== null) {
            // color of the marker, default purple
            let myCustomColour = "#8800ff";
            // special non-mentioned places are red
            if (place.type === "story_place" || place.type === "birth_place" || place.type === "death_place") {
                myCustomColour = "#ff0000";
                // mentioned places are blue
            } else if (place.type === "place_mentioned") {
                myCustomColour = "#0000ff";
            }
            // get name to show on the popup
            const name = MapView.renderPopup(place2),
                // style the popups
                markerHtmlStyles =
                    `background-color: ${myCustomColour};
                    width: 1rem;
                    height: 1rem;
                    display: block;
                    left: -.5rem;
                    top: -.5rem;
                    position: relative;
                    border-radius: 100px;
                    transform: rotate(45deg);
                    border: 1px solid #FFFFFF`,
                // create the actual icon
                icon = Leaflet.divIcon({
                    "className": "my-custom-pin",
                    "iconAnchor": [0, 8],
                    "labelAnchor": [-2, 0],
                    "popupAnchor": [0, -12],
                    "html": `<span style="${markerHtmlStyles}" />`,
                });
            // return a marker at the place with the marker, opens up the place's tab on double click
            return (
                <Marker
                    position={[place2.latitude, place2.longitude]}
                    icon={icon}
                    key={i}
                    onClick={this.handleClick.bind(this, place, name)}>
                    <Popup>{name}</Popup>
                </Marker>
            );
        } else {
            return null;
        }
    }

    // click handler for popup
    handleClick(place, name) {
        // if double click, go to the place
        if (this.lastclick.popup === place && Date.now() - this.lastclick.time <= 1000) {
            this.props.actions.addTab(place.place_id, name, "Places");
        } else {
            // otherwise just update last click
            this.lastclick = {
                "popup": place,
                "time": Date.now(),
            };
        }
    }

    /**
     * Render text for a place's popup
     * @param {Object} place The place to render the pop up for
     * @returns {String} The text for the popup
     */
    static renderPopup(place) {
        if (place.hasOwnProperty("display_name")) {
            return place.display_name;
            // if it has a full_name property
        } else if (place.hasOwnProperty("full_name")) {
            // use that for the text
            return place.full_name;
            // or if it has a name property
        } else if (place.hasOwnProperty("name")) {
            // use that instead
            return place.name;
        } else {
            // bad place, warn this
            console.warn("Place does not have full_name or name", place);
            // don't return anything
            return null;
        }
    }

    renderFieldtripLayer(){
        let json = {
            "type": "FeatureCollection",
            "name": "aug_1895_photo1",
            "crs": { "type": "name", "properties": { "name": "urn:ogc:def:crs:EPSG::3857" } },
            "features": [
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 564439.55929391970858, 6242814.630248315632343 ], [ 564714.726510920911096, 6242814.630248315632343 ], [ 564903.903972609085031, 6242797.43229725304991 ], [ 565179.071189610171132, 6242728.640493002720177 ], [ 565351.050700235879049, 6242591.056884502992034 ], [ 565488.634308736422099, 6242591.056884502992034 ], [ 565695.009721487294883, 6242556.660982377827168 ], [ 565849.791281050420366, 6242436.275324939750135 ], [ 565952.97898742579855, 6242419.077373877167702 ], [ 566245.344155489467084, 6242539.463031315244734 ], [ 566572.105225678300485, 6242677.046639814972878 ], [ 566812.87654055422172, 6242728.640493002720177 ], [ 567122.439659680472687, 6242831.828199378214777 ], [ 567346.013023493927903, 6242866.224101503379643 ], [ 567552.388436244684272, 6242935.015905753709376 ], [ 567775.961800058139488, 6242986.609758941456676 ], [ 568051.129017059225589, 6243021.005661066621542 ], [ 568205.910576622351073, 6243055.401563191786408 ], [ 568395.088038310525008, 6243055.401563191786408 ], [ 568584.265499998815358, 6243055.401563191786408 ], [ 568859.43271699990146, 6243106.995416379533708 ], [ 569100.204031875939108, 6243192.985171692445874 ], [ 569289.381493564113043, 6243244.579024880193174 ], [ 569444.163053127238527, 6243382.16263338085264 ], [ 569598.944612690364011, 6243502.548290818929672 ], [ 569805.320025441236794, 6243571.340095069259405 ], [ 569994.497487129527144, 6243588.538046131841838 ], [ 570218.070850942865945, 6243657.329850382171571 ], [ 570544.831921131699346, 6243777.715507820248604 ], [ 570630.821676444495097, 6243829.309361007995903 ], [ 570819.999138132785447, 6243880.903214194811881 ], [ 570923.186844508163631, 6243880.903214194811881 ], [ 571026.37455088365823, 6243829.309361007995903 ], [ 571249.947914696997032, 6243760.517556757666171 ], [ 571456.323327447869815, 6243657.329850382171571 ], [ 571714.292593386373483, 6243588.538046131841838 ], [ 571920.668006137246266, 6243588.538046131841838 ], [ 572281.824978451128118, 6243622.933948257006705 ], [ 572505.398342264583334, 6243691.725752507336438 ], [ 572642.981950765126385, 6243726.121654632501304 ], [ 573021.33687414159067, 6243743.319605695083737 ], [ 573348.09794433042407, 6243794.913458882831037 ], [ 573623.265161331510171, 6243863.705263132229447 ], [ 573623.265161331510171, 6243708.923703569918871 ], [ 573588.869259206345305, 6243588.538046131841838 ], [ 573588.869259206345305, 6243502.548290818929672 ], [ 573812.442623019800521, 6243536.944192944094539 ], [ 574104.807791083469056, 6243536.944192944094539 ], [ 574259.589350646594539, 6243588.538046131841838 ], [ 574465.964763397350907, 6243674.527801444754004 ] ] } },
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 574465.964763397350907, 6243674.527801444754004 ], [ 574534.75656764768064, 6243536.944192944094539 ], [ 574655.142225085641257, 6243450.954437631182373 ], [ 574741.131980398437008, 6243364.964682318270206 ], [ 574861.517637836514041, 6243227.381073817610741 ], [ 574930.309442086727358, 6243210.183122755028307 ], [ 574947.507393149309792, 6243055.401563191786408 ], [ 574981.903295274474658, 6242866.224101503379643 ], [ 575033.497148462105542, 6242677.046639814972878 ], [ 575085.091001649852842, 6242505.067129190079868 ], [ 575222.674610150395893, 6242333.087618564255536 ], [ 575274.268463338143192, 6242281.493765376508236 ], [ 575274.268463338143192, 6242161.108107938431203 ], [ 575205.476659087813459, 6242040.722450500354171 ], [ 575188.278708025231026, 6241937.534744124859571 ], [ 575136.684854837600142, 6241731.159331373870373 ], [ 575119.486903775017709, 6241559.179820748046041 ], [ 575119.486903775017709, 6241249.616701622493565 ], [ 575085.091001649852842, 6241008.8453867463395 ], [ 575085.091001649852842, 6240716.480218682438135 ], [ 575085.091001649852842, 6240510.104805931448936 ], [ 575085.091001649852842, 6240355.323246368207037 ], [ 575050.695099524687976, 6240114.551931492984295 ], [ 575119.486903775017709, 6240080.156029367819428 ] ] } },
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 575119.486903775017709, 6240080.156029367819428 ], [ 575432.489613113924861, 6240028.562176180072129 ], [ 575690.458879052428529, 6240080.156029367819428 ], [ 575931.230193928466178, 6240080.156029367819428 ], [ 576086.011753491591662, 6240080.156029367819428 ], [ 576361.178970492677763, 6240114.551931492984295 ], [ 576601.950285368598998, 6240131.749882555566728 ], [ 576842.721600244636647, 6240200.541686805896461 ], [ 577100.690866183140315, 6240234.937588931061327 ], [ 577341.46218105906155, 6240252.135539993643761 ], [ 577616.629398060147651, 6240252.135539993643761 ], [ 577926.192517186398618, 6240234.937588931061327 ], [ 578132.567929937271401, 6240148.947833618149161 ], [ 578373.339244813192636, 6240114.551931492984295 ], [ 578596.912608626647852, 6240011.364225117489696 ], [ 578734.496217127190903, 6239942.572420867159963 ], [ 578923.673678815364838, 6239804.988812366500497 ], [ 579044.05933625344187, 6239581.415448552928865 ], [ 579164.444993691402487, 6239495.425693240016699 ], [ 579233.236797941615805, 6239633.009301740676165 ], [ 579370.820406442158855, 6239770.59291024133563 ], [ 579577.195819193031639, 6239890.978567679412663 ], [ 579903.956889381865039, 6240045.760127242654562 ], [ 580144.728204257786274, 6240131.749882555566728 ], [ 580316.707714883494191, 6240234.937588931061327 ], [ 580437.093372321454808, 6240372.521197430789471 ], [ 580660.666736134910025, 6240578.896610181778669 ], [ 580815.448295698035508, 6240768.074071870185435 ], [ 580901.438051010831259, 6240957.2515335585922 ], [ 580987.42780632362701, 6241043.241288871504366 ], [ 581125.011414824286476, 6241180.824897372163832 ], [ 581142.209365886752494, 6241301.210554810240865 ], [ 581107.813463761704043, 6241404.398261185735464 ], [ 581107.813463761704043, 6241490.388016497716308 ], [ 581314.188876512460411, 6241610.77367393579334 ], [ 581503.366338200750761, 6241731.159331373870373 ], [ 581658.147897763876244, 6241817.149086686782539 ] ] } },
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 581658.147897763876244, 6241817.149086686782539 ], [ 581726.939702014089562, 6241679.565478186123073 ], [ 581933.315114764962345, 6241593.575722873210907 ], [ 582191.284380703466013, 6241541.981869685463607 ], [ 582518.045450892299414, 6241421.596212248317897 ], [ 582930.796276393928565, 6241387.200310123153031 ], [ 583205.963493395014666, 6241370.002359060570598 ], [ 583498.3286614586832, 6241370.002359060570598 ], [ 583704.704074209555984, 6241507.585967560298741 ], [ 583911.079486960428767, 6241645.169576060958207 ], [ 583979.871291210642084, 6241748.357282436452806 ], [ 584065.861046523554251, 6241971.930646250024438 ], [ 584255.038508211728185, 6242367.483520689420402 ], [ 584478.611872025183402, 6242728.640493002720177 ], [ 584616.195480525726452, 6242935.015905753709376 ], [ 584719.383186901104636, 6243141.391318504698575 ], [ 584874.16474646423012, 6243364.964682318270206 ], [ 584942.956550714559853, 6243554.142144006676972 ], [ 584908.560648589394987, 6243657.329850382171571 ], [ 585080.540159215102904, 6243880.903214194811881 ], [ 585321.311474091024138, 6243949.695018445141613 ], [ 585596.478691092110239, 6244087.278626945801079 ], [ 585923.23976128094364, 6244242.060186509042978 ], [ 586215.604929344612174, 6244328.049941821955144 ], [ 586714.345510159153491, 6244379.643795009702444 ], [ 586783.137314409366809, 6244396.841746072284877 ], [ 586937.918873972492293, 6244396.841746072284877 ], [ 587075.502482473035343, 6244448.435599260032177 ], [ 587247.48199309874326, 6244500.029452447779477 ], [ 587419.461503724451177, 6244482.831501385197043 ], [ 587608.638965412625112, 6244482.831501385197043 ], [ 587797.816427100915462, 6244448.435599260032177 ], [ 587918.202084538876079, 6244396.841746072284877 ], [ 588107.379546227166429, 6244414.039697134867311 ], [ 588210.567252602544613, 6244534.425354572944343 ], [ 588451.338567478582263, 6244775.196669449098408 ], [ 588537.328322791378014, 6244912.780277949757874 ], [ 588692.109882354503497, 6244998.77003326267004 ], [ 588950.079148293007165, 6245015.967984324321151 ], [ 589104.860707856132649, 6245033.165935386903584 ], [ 589362.829973794752732, 6245119.15569069981575 ], [ 589603.601288670673966, 6245170.74954388756305 ], [ 589913.164407796924934, 6245153.551592824980617 ], [ 590136.737771610263735, 6245050.363886449486017 ], [ 590274.321380110806786, 6244998.77003326267004 ] ] } },
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 590274.321380110806786, 6244998.77003326267004 ], [ 590430.822734780376777, 6244809.592571574263275 ], [ 590534.010441155754961, 6244637.613060948438942 ], [ 590551.208392218337394, 6244431.237648197449744 ], [ 590551.208392218337394, 6244190.466333321295679 ], [ 590637.198147531133145, 6243966.892969507724047 ], [ 590826.375609219423495, 6243794.913458882831037 ], [ 591015.553070907713845, 6243519.746241881512105 ], [ 591101.542826220509596, 6243296.172878067940474 ], [ 591342.314141096430831, 6243124.193367442116141 ], [ 591531.491602784721181, 6242986.609758941456676 ], [ 591669.075211285264231, 6242780.234346190467477 ], [ 591703.471113410429098, 6242591.056884502992034 ], [ 591720.669064473011531, 6242367.483520689420402 ], [ 591892.648575098719448, 6242178.306059001013637 ], [ 592133.419889974640682, 6242092.31630368810147 ], [ 592408.587106975726783, 6242040.722450500354171 ], [ 592700.952275039395317, 6242057.920401562936604 ], [ 592941.723589915432967, 6242040.722450500354171 ], [ 593251.286709041567519, 6241937.534744124859571 ], [ 593526.453926042770036, 6241731.159331373870373 ], [ 593750.027289856108837, 6241593.575722873210907 ], [ 593973.600653669564053, 6241593.575722873210907 ], [ 594111.184262170107104, 6241559.179820748046041 ] ] } },
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 594111.184262170107104, 6241559.179820748046041 ], [ 594231.569919608067721, 6241679.565478186123073 ] ] } },
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 594111.184262170107104, 6241559.179820748046041 ], [ 593849.080079628620297, 6241337.034151456318796 ], [ 593664.303176741464995, 6241221.548587151803076 ], [ 593364.040709549910389, 6241036.77168426476419 ], [ 593086.875355219235644, 6240805.800555655732751 ], [ 592809.710000888444483, 6240551.732314186170697 ], [ 592694.224436584045179, 6240297.664072716608644 ], [ 592486.350420836010017, 6240297.664072716608644 ], [ 592255.379292227094993, 6240343.858298437669873 ], [ 592024.408163618179969, 6240320.761185577139258 ], [ 591908.92259931366425, 6240135.984282690100372 ], [ 591677.951470704749227, 6239951.207379803061485 ], [ 591631.757244982989505, 6239835.721815498545766 ], [ 591308.397664930438623, 6239951.207379803061485 ], [ 590938.843859156128019, 6240089.79005696810782 ], [ 590338.318924773018807, 6240297.664072716608644 ], [ 590153.542021885863505, 6240343.858298437669873 ], [ 589945.668006137828343, 6240251.469846994616091 ], [ 589414.434410337242298, 6240089.79005696810782 ], [ 588998.686378841171972, 6240020.498718385584652 ], [ 588698.423911649617366, 6239928.110266941599548 ], [ 588444.355670179822482, 6239928.110266941599548 ], [ 588282.675880153547041, 6239881.916041220538318 ], [ 588005.510525822872296, 6239720.236251194030046 ], [ 587820.733622935716994, 6239627.847799750044942 ], [ 587381.888478578766808, 6239604.750686889514327 ], [ 586712.072205612901598, 6239627.847799750044942 ], [ 586065.353045507916249, 6239581.653574028983712 ], [ 585765.090578316245228, 6239466.168009724467993 ], [ 585534.119449707330205, 6239373.779558280482888 ], [ 585395.536772541934624, 6239304.488219697959721 ], [ 585256.954095376655459, 6239142.808429671451449 ], [ 585118.371418211259879, 6239073.517091088928282 ], [ 584933.594515324104577, 6239027.32286536693573 ], [ 584887.400289602344856, 6239189.002655393444002 ], [ 584702.623386715189554, 6239512.362235445529222 ], [ 584587.13782241079025, 6239720.236251194030046 ], [ 584217.584016636479646, 6239581.653574028983712 ], [ 584032.807113749324344, 6239581.653574028983712 ], [ 583801.835985140409321, 6239604.750686889514327 ], [ 583524.670630809734575, 6239604.750686889514327 ], [ 583270.602389339823276, 6239650.944912611506879 ], [ 582993.437035009148531, 6239789.527589776553214 ], [ 582716.271680678473786, 6240043.595831246115267 ], [ 582392.912100625922903, 6240482.44097560364753 ], [ 582115.746746295248158, 6240805.800555655732751 ], [ 581977.164069129852578, 6241059.868797125294805 ], [ 581838.581391964573413, 6241337.034151456318796 ], [ 581726.939702014089562, 6241679.565478186123073 ], [ 581699.998714799177833, 6241683.490844369865954 ] ] } },
                { "type": "Feature", "properties": { "Id": 0 }, "geometry": { "type": "LineString", "coordinates": [ [ 575119.486903775017709, 6240080.156029367819428 ], [ 574833.227061256533489, 6239914.251999224536121 ], [ 574537.584016637061723, 6239803.385857492685318 ], [ 574260.418662306386977, 6239655.564335183240473 ], [ 573909.342546820756979, 6239544.698193450458348 ], [ 573743.043334222282283, 6239489.265122584067285 ], [ 573539.788741046446376, 6239470.787432295270264 ], [ 573355.011838159291074, 6239581.65357402805239 ], [ 573225.668006138294004, 6239674.042025471106172 ], [ 573077.846483828616329, 6239747.952786626294255 ], [ 572948.502651807619259, 6239747.952786626294255 ], [ 572671.337297476828098, 6239858.818928359076381 ], [ 572264.828111125156283, 6240025.118140957318246 ], [ 572006.140447083162144, 6240209.895043844357133 ], [ 571747.452783041168004, 6240431.627327308990061 ], [ 571470.287428710376844, 6240653.35961077362299 ], [ 571063.778242358705029, 6240782.703442794270813 ], [ 570749.657507450552657, 6240949.002655392512679 ], [ 570380.103701676242054, 6241041.391106836497784 ], [ 570195.326798789086752, 6241059.868797125294805 ], [ 569936.639134747092612, 6241226.16800972353667 ], [ 569788.817612437298521, 6241688.110266941599548 ], [ 569640.996090127620846, 6242020.708692138083279 ], [ 569530.129948395304382, 6242279.396356180310249 ], [ 569345.35304550814908, 6242501.128639644943178 ], [ 569160.576142620993778, 6242611.994781376793981 ], [ 568846.455407712841406, 6242926.115516285412014 ], [ 568717.111575691844337, 6243000.026277440600097 ], [ 568584.265499998815358, 6243055.401563191786408 ], [ 568569.290053382166661, 6243073.937038594856858 ] ] } }
            ]
        };
        return (<GeoJSON style={()=>{ return {
            "color": "#ff7800",
            "weight": 5,
            "opacity": 0.65
        }}} key={0} data={json}/>);
    }

    render() {
        return (
            <Map ref="map"
                center={this.defineMapCenter.bind(this)()}
                zoom={this.defineMapZoom.bind(this)()}
                boundsOptions={{
                    paddingBottomRight: [250, 0],
                    paddingTopLeft: [250, 0],
                }}
            >
                <LayersControl position="topright">
                    {this.renderTiles.bind(this)()}
                    {this.renderMarkers.bind(this)()}
                    {this.renderFieldtripLayer.bind(this)()}
                </LayersControl>
            </Map>
        );
    }
}

// need places for the map to work
MapView.propTypes = {
    "places": PropTypes.array.isRequired,
};

/**
 * Set certain props to access Redux states
 * @param {Object} state All possible Redux states
 * @returns {Object} Certain states that are set on props
 */
function mapStateToProps(state) {
    return {
        "state": state.tabViewer,
    };
}

/**
 * Set the "actions" prop to access Redux actions
 * @param {*} dispatch Redux actions
 * @returns {Object} The actions that are mapped to props.actions
 */
function mapDispatchToProps(dispatch) {
    return {
        "actions": {
            ...bindActionCreators(tabViewerActions, dispatch),
        },
    };
}

export default connect(
    mapStateToProps,
    mapDispatchToProps
)(MapView);

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

import React from "react";
import Fuse from "fuse.js";

import FuseInfo from "./FuseInfo";

var FusePicker = function (_React$Component) {
  _inherits(FusePicker, _React$Component);

  function FusePicker(props) {
    _classCallCheck(this, FusePicker);

    var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

    _this.state = {
      selectedIndex: 0,
      items: []
    };


    _this.fuse = new Fuse(props.items, props.fuseOptions);
    return _this;
  }

  FusePicker.prototype._selectIndex = function _selectIndex(selectedIndex) {
    this.props.onChangeHighlighted(this.state.items[selectedIndex]);
    this.setState({ selectedIndex: selectedIndex });
  };

  FusePicker.prototype._moveUp = function _moveUp() {
    if (this.state.selectedIndex > 0) {
      this._selectIndex(--this.state.selectedIndex);
      return;
    }

    if (!this.props.cycleToTop) {
      return;
    }

    this._selectIndex(this.state.items.length - 1);
  };

  FusePicker.prototype._moveDown = function _moveDown() {
    var itemsLength = this.state.items.length - 1;

    if (this.state.selectedIndex < itemsLength) {
      this._selectIndex(++this.state.selectedIndex);
      return;
    }

    if (!this.props.cycleToTop) {
      return;
    }

    this.selectedIndex(0);
  };

  FusePicker.prototype._onKeyDown = function _onKeyDown(event) {
    switch (event.key) {
      case "ArrowUp":
        this._moveUp();
        event.preventDefault();
        break;

      case "ArrowDown":
        this._moveDown();
        event.preventDefault();
        break;

      case "Tab":
        if (event.shiftKey) {
          this._moveUp();
        } else {
          this._moveDown();
        }
        event.preventDefault();
        break;

      case "Enter":
        var item = this.state.items[this.state.selectedIndex];
        if (!item) {
          return;
        }
        this.setState({ items: [] });
        this.props.onChange(item);
        break;

      case "Escape":
        this.setState({ items: [] });
        this.props.onClose();
    }
  };

  FusePicker.prototype._onInputChange = function _onInputChange(event) {
    var value = event.target.value;

    if (value.length) {
      var items = this.fuse.search(value);
      this.setState({
        items: items.slice(0, this.props.maxDisplay),
        selectedIndex: 0
      });
      return;
    }

    this.setState({ items: [], selectedIndex: 0 });
  };

  FusePicker.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    this.fuse = new Fuse(nextProps.items, nextProps.fuseOptions);
  };

  FusePicker.prototype.render = function render() {
    var _this2 = this;

    if (!this.props.isOpen) {
      return null;
    }

    return React.createElement(
      "div",
      { className: "FusePicker" },
      this.props.renderInfo(),
      React.createElement("input", {
        type: "text",
        className: "FuseInput",
        autoFocus: true,
        onKeyDown: this._onKeyDown.bind(this),
        onChange: this._onInputChange.bind(this)
      }),
      React.createElement(
        "ul",
        { className: "FuseResults" },
        this.state.items.map(function (item, index) {
          return React.createElement(
            "li",
            {
              key: index,
              className: "FuseResult " + (index === _this2.state.selectedIndex && "selected"),
              onMouseOver: _this2._selectIndex.bind(_this2, index),
              onClick: _this2.props.onChange.bind(_this2, _this2.state.items[index])
            },
            _this2.props.renderItem(item)
          );
        })
      )
    );
  };

  return FusePicker;
}(React.Component);

export { FusePicker as default };


FusePicker.defaultProps = {
  maxDisplay: 5,
  cycleToTop: true,
  fuseOptions: {
    shouldSort: true,
    threshold: 0.6,
    location: 0,
    distance: 100,
    maxPatternLength: 32,
    minMatchCharLength: 1,
    keys: ["title"]
  },
  onChangeHighlighted: function onChangeHighlighted(item) {},
  onChange: function onChange(item) {},
  onClose: function onClose() {},
  renderItem: function renderItem(item) {
    return item;
  },
  renderInfo: function renderInfo() {
    return React.createElement(FuseInfo, null);
  },
  itemValue: function itemValue(item) {
    return item;
  }
};